package com.diliprathore.java;

import java.io.*;
import java.util.HashMap;
import java.util.Map;

public class SerializationExample {
    /**
     * while using DataOutputStream to write data to a .dat file using methods such as writeInt (or writeUTF), we will have to do it individually for each field.
     * Serialization is a process to write a data structure i.e. an object directly to a file. We can use ObjectInputStream/ObjectOutputStream for this purpose.
     * And we have to make the class serializable. Serializable interface does not
     * have any methods, but it just gives a heads-up to JVM that we want to write data of an object to a file at some point in time. It is strongly recommended that we declare
     * a long field called serialVersionUID. In absence of this, compiler will generate this UID and it's value could be different on different compilers which can later on
     * cause issue. Default value of this serialVersionUID generated by compiler will be based on the class attributes. If these attributes are changed, we should change this UID
     * as well. If we don't do so, there will be a compatibility issue.
     * Note that when a class object that you want to serialize (obviously the class should be implementing Serializable interface), then even any child class based attributes
     * should be made serializable. HashMap already implements Serializable. Such serialized files are supposed to be read by applications and not humans.
     */

    public static void main(String[] args) throws IOException {
        Map<String, Integer> chanu = new HashMap<>();
        chanu.put("Maths", 100);
        chanu.put("English", 89);

        Name nameObj = new Name(1, "Chanu", chanu);
        nameObj.Serialize();

        System.out.println("Reading serialized class into 'Name' object..");
        try (ObjectInputStream inFile = new ObjectInputStream(new DataInputStream(new FileInputStream("serialized.out")))) {
            Name name1 = (Name) inFile.readObject();
            System.out.println("id -> " + name1.getId() + ", name -> "  +name1.getName() + ", marks ->" + name1.getMarks());
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}

class Name implements Serializable {
    private int id;
    private String name;
    private Map<String, Integer> marks;

    private long serialVersionUID = 1;

    public Name(int id, String name, Map<String, Integer> marks) {
        this.id = id;
        this.name = name;
        this.marks = marks;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public Map<String, Integer> getMarks() {
        return marks;
    }

    public void Serialize() throws IOException {
        try (ObjectOutputStream outFile = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream("serialized.out")))) {
            outFile.writeObject(new Name(this.id, this.name, this.marks));
        }
    }
}
